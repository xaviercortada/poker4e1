{
  "name": "facebook-client",
  "version": "1.6.1",
  "engines": {
    "node": ">= 0.4.0"
  },
  "homepage": "http://dracoblue.net/c/node-facebook-client/",
  "description": "A javascript (nodejs) implementation of facebook's client for oauth and rest+graph api.",
  "author": {
    "name": "DracoBlue",
    "email": "JanS@DracoBlue.de"
  },
  "contributors": [
    {
      "name": "DracoBlue",
      "email": "JanS@DracoBlue.de"
    },
    {
      "name": "jharlap"
    },
    {
      "name": "liuliu"
    },
    {
      "name": "kaareal"
    },
    {
      "name": "leoasis"
    }
  ],
  "keywords": [
    "facebook",
    "oauth",
    "client"
  ],
  "directories": {},
  "main": "lib/facebook-client/index.js",
  "bin": {},
  "repository": {
    "type": "git",
    "web": "http://github.com/DracoBlue/node-facebook-client.git"
  },
  "bugs": {
    "url": "http://github.com/DracoBlue/node-facebook-client/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/DracoBlue/node-facebook-client/blob/master/LICENSE"
    }
  ],
  "readme": "node-facebook-client README\n===========================\n\nVersion: 1.6.1\n\nOfficial Site: <http://dracoblue.net/>\n\nnode-facebook-client is copyright 2010-2012 by DracoBlue <http://dracoblue.net>\n\nWhat is node-facebook-client?\n-----------------------------\nThe node-facebook-client library is a set of nodejs classes to communicate\nwith the rest and graph api provided by facebook.\n\nIt works great if you embed the facebook connect button on your page and\nwant to use the rest + graph api by facebook. Oauth-support may work but\nis not tested that well.\n\nThe library is not officially created nor maintained by facebook. It is\ncreated by dracoblue and licensed under the terms of MIT License.\n\n## Example\n\nThis small example uses the FacebookClient class to retrieve the name of a\nuser. requst.headers are the headers from the server request.\n\n    var FacebookClient = require(\"facebook-client\").FacebookClient;\n    \n    var facebook_client = new FacebookClient(\n        \"yourappid\", // configure like your fb app page states\n        \"yourappsecret\", // configure like your fb app page states\n        {\n            \"timeout\": 10000 // modify the global timeout for facebook calls (Default: 10000)\n        }\n    );\n    \n    facebook_client.getSessionByRequestHeaders(request.headers)(function(facebook_session) {\n        facebook_session.graphCall(\"/me\", {\n        })(function(result) {\n            console.log('Username is:' + result.name);\n        });\n        facebook_session.graphCall(\"/me/feed\", {message:\"I love node.js!\"}, 'POST')(function(result) {\n            console.log('The new feed post id is: ' + result.id);\n        });\n    });\n    \nA full example may be executed with: `node run_example.js`. Please configure `yourappid`+`yourappsecret` in that file first.\n\n## Graph API\n\n### FacebookClient#graphCall(path, params[, method, options])\n\nDoing a call against the graph server.\n\n    client.graphCall(path, params, method)(function(result) {\n        // \n    });\n\nThe parameter `method` can be omitted and is 'GET' in this case. You may use\n`options.timeout = 5000` to modify the timeout until the request will be\ncanceled. \n\n## Rest API\n\n### FacebookSession#restCall(method, params, access_token[, options])\n\nDoing a signed call against the rest api server, by using the session of the\nuser.\n\n    session.restCall(\"users.getInfo\", {\n        fields: \"name\",\n        uids: session.uid\n    })(function(response_users) {\n        // work with it\n    });\n\nYou may use `options.timeout = 5000` to modify the timeout until the request\nwill be canceled. \n\n## General API\n\n### FacebookClient#getSessionByRequestHeaders(request_headers)\n\nUse the request headers to retrieve the session.\n\n    facebook_client.getSessionByRequestHeaders(request.headers)(function(facebook_session) {\n        // session is either undefined or a valid FacebookSession\n    });\n\n### FacebookSession#isValid()\n\nCalls `/me` on the graph api, to check whether the session is still valid or the\nuser has already logged out.\n\n    session.isValid()(function(is_valid) {\n        // is either true or false\n    });\n\nRemember to do that only when necessary and not on every request.\n\n### FacebookClient#getSessionByAccessToken(access_token)\n\nCreating a new FacebookSession instance with a given access_token.\n\n### FacebookSession#getId()\n\nRetrieving the id of the session.\n\n    session.getId()(function(id) {\n        // is either a string or undefined, in case the session has no id\n    });\n\n### FacebookSession#getMeta()\n\nTries to retrieve all data from the graph call /me for the user.\n\n    session.getMeta()(function(user_data) {\n        // work with it\n    });\n\n## Internal API\n\n### FacebookClient#getAccessToken(access_params)\n\nRetrieving an AccessToken with the given parameters. You don't need to use this\nfunction if you used `FacebookClient#getSessionByRequestHeaders`.\n\n    client.getAccessToken(access_params)(function(access_token, expires) {\n        // \n    });\n    \n### FacebookSession#retrieveAccessToken(code, redirect_uri)\n\nRetrieve an access token by providing a code and a redirect_uri. Usually from\nsuccessful oauth redirect.\n\n### FacebookSession#injectAccessToken(access_token)\n\nUsed to inject an access_token into an existing FacebookSession. This will enable\ncalls like `FacebookSession#restCall` and `FacebookSession#graphCall` to work\nauthenticated. It is triggered by `FacebookClient#getSessionByRequestHeaders`\nafter successful creation of the session.\n\n### FacebookSession#getAccessToken(access_params)\n\nRetrieving an AccessToken with the given parameters and injecting it into the\nFacebookSession.\n\n### FacebookToolkit.generateSignature(params, api_secret)\n\nCalculates the signature for a given set of parameters and the api_secret.\n\nChangelog\n---------\n\n- 1.6.1 (2012/10/02)\n  - removed unused sys \n- 1.6.0 (2012/01/22)\n  - rewrote requests from multiple parameters to options-object\n  - added `options.timeout` for `restCall` and `graphCall` #22\n  - fixed error handling in case the timeout is reached #22\n- 1.5.3 (2012/01/22)\n  - fixed issue with graphCall and method parameter #21\n- 1.5.2 (2012/01/07)\n  - added multiquery-support for graphCall #12\n- 1.5.1 (2012/01/06)\n  - fixed isValid: throwed an exception, when user_data.error was not existant\n  - added backward compatibility for node 0.4.x, if toString('hex') was missing\n- 1.5.0 (2012/01/05)\n  - added support for fbsr-cookie from new facebook auth #16\n  - added support for lazy-access-token retrieval if oauth-code is given\n  - added timeout of 10 seconds for each call against facebook #15\n- 1.4.0 (2011/10/06)\n  - added multiquery-support. #12\n- 1.3.0 (2011/04/26)\n  - added FacebookSession#isValid\n  - fixed expires validation fixes #5\n  - added method argument to session.graphCall to permit POSTing in addition to GETting\n- 1.2.0 (2011/03/09)\n  - added support for node 0.4\n- 1.1.0 (2010/12/29)\n  - removed session_key support\n  - added example\n- 1.0.1 (2010/12/29)\n  - added secure url for access_token\n- 1.0.0 (2010/10/05)\n  - Initial release\n\nContributors\n------------\n\n- DracoBlue http://dracoblue.net\n- jharlap https://github.com/jharlap\n- liuliu https://github.com/liuliu\n- kaareal https://github.com/kaareal\n- leoasis https://github.com/leoasis\n- deedubs https://github.com/deedubs\n\nLicense\n--------\n\nnode-facebook-client is licensed under the terms of MIT. See LICENSE for more information.\n",
  "readmeFilename": "README.md",
  "_id": "facebook-client@1.6.1",
  "dist": {
    "shasum": "3e6a0d7ae399df69f5ef6ebcdd3589c2d08bbf96"
  },
  "_from": "facebook-client@",
  "_resolved": "https://registry.npmjs.org/facebook-client/-/facebook-client-1.6.1.tgz"
}
